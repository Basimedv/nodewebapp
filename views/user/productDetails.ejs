 
  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8">
    <title>
      <%= product ? product.name : "Product" %> | COLINGUEST
    </title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/header.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <style>
      body {
        background: url("/images/background.jpg") no-repeat center center fixed;
        background-size: cover;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
      }

      main {
        min-height: calc(100vh - 80px);
        padding-bottom: 2rem;
      }

      .footer {
        background-color: black;
        color: #ecf0f1;
        padding: 2rem 0;
        margin-top: 2rem;
      }

      .footer-title {
        font-weight: 700;
        font-size: 1.2rem;
        margin-bottom: 1rem;
      }

      .footer-social a {
        color: #bdc3c7;
        font-size: 1.2rem;
        margin-right: 10px;
        transition: color 0.3s ease;
      }

      .footer-social a:hover {
        color: #fff;
      }

      /* Enhanced Product Display */
      .main-image {
        overflow: hidden;
        border-radius: 15px;
        background: transparent;
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: crosshair;
        position: relative;
          backdrop-filter: blur(8px);
            background: rgba(255, 255, 255, 0.05);
      }

      .main-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
        transform-origin: center center;
      }

      /* Main Image Container with Navigation */
      .main-image-container {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .nav-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
      
         background: transparent;
        border: none;
        border-radius: 30%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        color: #cbc8c8;
        cursor: pointer;
        z-index: 10;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
      }

      .nav-arrow:hover {
        background: rgba(255, 255, 255, 1);
        transform: translateY(-50%) scale(1.1);
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
      }

      .nav-arrow-left {
        left: -25px;
      }

      .nav-arrow-right {
        right: -25px;
      }

      /* Responsive adjustments for arrows */
      @media (max-width: 768px) {
        .nav-arrow {
          width: 40px;
          height: 40px;
          font-size: 1rem;
        }

        .nav-arrow-left {
          left: -20px;
        }

        .nav-arrow-right {
          right: -20px;
        }
      }

      .product-header {
        padding-bottom: 1.5rem;
        border-bottom: 2px solid #f0f0f0;
        margin-bottom: 1.5rem;
      }

      .product-title {
        font-size: 1.8rem;
        color: #2c3e50;
        letter-spacing: -0.5px;
        line-height: 1.2;
      }

      .product-meta {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
      }

      .pd-card {
        background: transparent;
        border-radius: 15px;
        padding: 2rem;
        border: 1px solid #e9ecef;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
      }

      .pd-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      }

      .rating-stars {
        color: #ffc107;
        font-size: 1.1rem;
      }

      .feature-tile {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 1rem;
        padding: 1rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
        transition: transform 0.2s ease;
      }

      .feature-tile:hover {
        transform: translateX(5px);
      }

      .feature-tile i {
        color: #667eea;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(102, 126, 234, 0.1);
        border-radius: 50%;
      }

      .product-description {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        line-height: 1.6;
      }

      /* Enhanced Buttons */
      .btn {
        border-radius: 25px;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
        position: relative;
        overflow: hidden;
      }

      .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
      }

      .btn:hover::before {
        left: 100%;
      }

      .btn-dark {
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        color: white;
      }

      .btn-outline-secondary:hover {
        background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);
        color: white;
        transform: scale(1.05);
      }

      /* Enhanced interactive elements */
      .thumbs-vertical img {
        width: 100%;
        margin-bottom: 10px;
        border-radius: 8px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.3s ease;
      }

      .thumbs-vertical img:hover {
        border-color: #667eea;
        transform: scale(1.05);
      }

      .thumbs-vertical img.active {
        border-color: #667eea;
        box-shadow: 0 0 10px rgba(102, 126, 234, 0.5);
      }

      .color-swatch {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        border: 2px solid transparent;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .color-swatch:hover {
        border-color: #667eea;
        transform: scale(1.1);
      }

      .color-swatch.active {
        border-color: #667eea;
        box-shadow: 0 0 10px rgba(102, 126, 234, 0.5);
      }

      .color-swatch img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .size-grid .btn {
        border-radius: 8px;
        padding: 0.5rem 1rem;
        transition: all 0.3s ease;
      }

      .size-grid .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }

      .size-grid .btn.active {
        background: var(--primary-gradient);
        color: white;
        border-color: #667eea;
      }

      /* Description Toggle Styles */
      .description-toggle {
        text-align: center;
        margin-bottom: 1rem;
      }

      .description-toggle .btn {
        border-radius: 20px;
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
      }

      .description-toggle .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }

      .product-description {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        line-height: 1.6;
        margin-top: 1rem;
        animation: slideDown 0.3s ease-out;
      }

      @keyframes slideDown {
        from {
          opacity: 0;
          transform: translateY(-10px);
        }

        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .product-description p {
        margin: 0;
        color: #495057;
      }

      .description-toggle .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }

      .product-description {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        line-height: 1.6;
        margin-top: 1rem;
        animation: slideDown 0.3s ease-out;
      }

      @keyframes slideDown {
        from {
          opacity: 0;
          transform: translateY(-10px);
        }

        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .product-description p {
        margin: 0;
        color: #495057;
      }

      /* Product styles */
      .main-image img {
        width: 100%;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
      }

      .thumbs-vertical img {
        width: 100%;
        margin-bottom: 10px;
        border-radius: 8px;
        cursor: pointer;
        border: 2px solid transparent;
      }

      .thumbs-vertical img.active {
        border-color: #667eea;
      }

      .color-swatch {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
        border: 2px solid transparent;
        cursor: pointer;
      }

      .color-swatch.active {
        border-color: #667eea;
      }

      .color-swatch img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      .size-grid .btn.active {
        background: #667eea;
        color: #fff;
      }

      .feature-tile {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 10px;
      }

      .rating-progress {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 0.5rem;
      }

      .rating-label {
        width: 60px;
        font-size: 0.9rem;
      }

      .rating-bar {
        flex-grow: 1;
        height: 8px;
        background-color: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
      }

      .rating-fill {
        height: 100%;
        background: linear-gradient(90deg, #ffc107 0%, #fd7e14 100%);
      }
       .signup-btn,
        .icon-btn {
            background: #2a2931;
            color: white;
            border: none;
            padding: 0 10px;
            border-radius: 4px;
            cursor: pointer;
            font-family: 'Outfit', sans-serif;
            font-weight: 500;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 30px;
            font-size: 15px;
            text-decoration: none;
        }
    </style>
  </head>

  <body>

    <header>
      <div class="mainhead">
        <img src="/images/colinguest.png" class="imageLogo" alt="Logo">
        <div class="buttons">
          <input type="text" class="searchBar" placeholder="Search product...">
          <a href="/wishlist" class="header-icon" aria-label="Wishlist" title="Wishlist">
            <i class="fas fa-heart"></i>
          </a>
          <a href="/cart" class="header-icon" aria-label="Cart" title="Cart">
            <i class="fas fa-cart-shopping"></i>
          </a>
          <% if (user) { %>
          <div class="user-menu">
            <button id="userMenuToggle" class="user-toggle">
            
              <span><%= user.fullName %></span>
           
            </button>
            <div id="userDropdown" class="user-dropdown" aria-hidden="true">
             
              <a href="/profile"><i class="fas fa-user"></i> <span>Profile</span></a>
              <a href="/orders"><i class="fas fa-bag-shopping"></i> <span>My Orders</span></a>
              <a href="/wallet"><i class="fas fa-wallet"></i> <span>My Wallet</span></a>
              <hr>
              <a href="/logout" class="logout"><i class="fas fa-right-from-bracket"></i> <span>Logout</span></a>
            </div>
          </div>
          <% } else { %>
            <a href="/login" class="icon-btn">Sign In</a>
          <% } %>
        </div>
      </div>
      <div class="subhead">
        <nav>
          <ul>
            <a href="/landingPage"><li>Home</li></a>
            <a href="/productListing"><li>Shop</li></a>
            <a href="/customListing"><li>Custom</li></a>
            <a href="/about"><li>About</li></a>
            <a href="/contact"><li>Contact</li></a>
          </ul>
        </nav>
      </div>
    </header>

    <script>
      document.addEventListener('click', (e) => {
        const toggle = document.getElementById('userMenuToggle');
        const dropdown = document.getElementById('userDropdown');
        if (!toggle || !dropdown) return;
        if (toggle.contains(e.target)) {
          dropdown.classList.toggle('open');
          dropdown.setAttribute('aria-hidden', dropdown.classList.contains('open') ? 'false' : 'true');
        } else if (!dropdown.contains(e.target)) {
          dropdown.classList.remove('open');
          dropdown.setAttribute('aria-hidden', 'true');
        }
      });
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const dropdown = document.getElementById('userDropdown');
          if (dropdown) {
            dropdown.classList.remove('open');
            dropdown.setAttribute('aria-hidden', 'true');
          }
        }
      });
    </script>

    <main>
      <div class="container py-4 pd-wrapper">
        <div id="user-data" style="display: none;"
          data-user="<%= typeof user !== 'undefined' && user && user._id ? user._id : '' %>"
          data-images="<%= JSON.stringify(product?.images || []) %>"></div>
        <div class="row g-4">
          <!-- Left: Thumbnails + Main Image -->
          <div class="col-lg-7">
            <div class="row g-3">

              <div class="col-12 col-md-10">
                <div class="main-image-container">
                  <!-- Previous Button -->
                  <button class="nav-arrow nav-arrow-left" id="prevImage">
                    <i class="fas fa-chevron-left"></i>
                  </button>

                  <!-- Main Image -->
                  <div class="main-image">
                    <img id="mainImage"
                      src="<%= (product && Array.isArray(product.images) && product.images[0]) ? product.images[0] : '' %>"
                      alt="<%= product ? (product.name || '') : '' %>">
                  </div>

                  <!-- Next Button -->
                  <button class="nav-arrow nav-arrow-right" id="nextImage">
                    <i class="fas fa-chevron-right"></i>
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Right: Product Info Card -->
          <div class="col-lg-5">
            <div class="pd-card shadow-lg">
              <div class="product-header">
                <h4 class="mb-1 fw-bold product-title">
                  <%= product ? (product.name || 'Product' ) : 'Product' %>
                </h4>
                <div class="product-meta">
                  <div class="d-flex align-items-center gap-2 mb-2">
                    <div class="rating-stars">
                      <i class="fa fa-star"></i><i class="fa fa-star"></i>
                      <i class="fa fa-star"></i><i class="fa fa-star-half-alt"></i><i class="far fa-star"></i>
                    </div>
                    <small class="text-muted">(50 Reviews)</small>
                    <small class="text-success fw-semibold">In Stock</small>
                  </div>
                </div>
              </div>

              <% const displayOffer=Math.max(product?.offerPercent || product?.productOffer || 0, (product?.category &&
                product?.category.offer) || 0); const baseRegular=Number(product?.regularPrice ?? product?.price ?? 0);
                const saleCandidate=Number(product?.sale ?? product?.salePrice ?? 0); const
                offerCalc=Math.round(baseRegular - (baseRegular * (displayOffer || 0) / 100)); const
                hasSale=saleCandidate> 0 && saleCandidate < baseRegular; const finalPrice=displayOffer> 0 ? offerCalc :
                  (hasSale ? saleCandidate : baseRegular);
                  %>

                  <div class="mb-3">
                    <% if (finalPrice < baseRegular) { %>
                      <div class="d-flex justify-content-between align-items-end">
                        <div>
                          <div class="small">Regular price</div>
                          <div>Rs. <del>
                              <%= baseRegular.toLocaleString('en-IN') %>
                            </del></div>
                        </div>
                        <div>
                          <div class="small fw-semibold">Sale price</div>
                          <div class="fw-bold fs-4">Rs. <%= Number(finalPrice).toLocaleString('en-IN') %>
                              <% if (displayOffer> 0) { %>
                                <span class="badge bg-success ms-1">
                                  <%= displayOffer %>% OFF
                                </span>
                                <% } %>
                          </div>
                        </div>
                      </div>
                      <% } else { %>
                        <div>
                          <div class="small text-muted">Price</div>
                          <div class="fw-bold fs-4">Rs. <%= baseRegular.toLocaleString('en-IN') %>
                          </div>
                        </div>
                        <% } %>
                  </div>

                  <!-- Colors -->
                  <% const swatches=(product?.images && product.images.length ? product.images.slice(0,4) : []); %>
                    <% if (swatches.length) { %>
                      <div class="mb-2 fw-semibold">Color :</div>
                      <div class="d-flex gap-2 mb-3" id="colorList">
                        <% swatches.forEach((img, idx)=> { %>
                          <div class="color-swatch <%= idx===0 ? 'active' : '' %>" data-idx="<%= idx %>">
                            <img src="<%= img %>" alt="color">
                          </div>
                          <% }) %>
                      </div>
                      <% } %>

                        <!-- Sizes -->
                        <% const sizes=Array.isArray(product?.sizes) && product.sizes.length ? product.sizes :
                          ['XS','S','M','L','XL']; %>
                          <div class="mb-2 fw-semibold">Select Size:</div>
                          <div class="size-grid d-flex flex-wrap gap-2 mb-3">
                            <% sizes.forEach((s, idx)=> { %>
                              <button type="button" class="btn <%= idx===0 ? 'active' : '' %>" data-size="<%= s %>">
                                <%= s %>
                              </button>
                              <% }) %>
                          </div>

                          <div class="d-flex gap-2 mb-2">
                            <button class="btn btn-dark" data-product-id="<%= product?._id %>"
                              data-price="<%= finalPrice %>">Buy Now</button>
                            <button class="btn btn-primary" data-product-id="<%= product?._id %>"
                              data-price="<%= finalPrice %>">
                              <i class="fa fa-cart-plus me-1"></i> Add to Cart
                            </button>
                            <button class="btn btn-outline-secondary" data-product-id="<%= product?._id %>">
                              <i class="fa fa-heart"></i>
                            </button>
                          </div>

                          <div class="feature-tile"><i class="fa fa-truck fs-4"></i>
                            <div><b>Free Delivery</b><br><small>Enter your postal code for availability</small></div>
                          </div>
                          <div class="feature-tile"><i class="fa fa-undo fs-4"></i>
                            <div><b>Free Returns</b><br><small>30 Days Delivery Returns</small></div>
                          </div>
            </div>

            <!-- Product Description -->
            <% if (product && product.description) { %>
              <div class="mt-4">
                <div class="description-toggle">
                  <button class="btn btn-outline-primary btn-sm" onclick="toggleDescription()">
                    <i class="fas fa-chevron-down me-2" id="desc-icon"></i>
                    Show Product Details
                  </button>
                </div>
                <div class="product-description" id="product-description" style="display: none;">
                  <p class="text-muted">
                    <%= product.description %>
                  </p>
                </div>
              </div>
              <% } %>
          </div>
        </div>

       
        <!-- Related -->
        <div class="mt-5 related">
          <h5 class="mb-3">Related Items</h5>
          <div id="relatedRow" class="row g-4 row-cols-1 row-cols-md-2 row-cols-lg-4"></div>
        </div>
      </div>
    </main>

    <!-- Footer -->
    <%-include("../partials/user/footer")%>

      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

      <script>
        document.addEventListener('DOMContentLoaded', function () {
          // Get user data from the template
          const userDataElement = document.getElementById('user-data');
          const userId = userDataElement ? userDataElement.getAttribute('data-user') : null;
          const currentUser = userId ? { _id: userId } : null;

          // Get all product images for switching
          const imagesData = userDataElement.getAttribute('data-images');
          const productImages = imagesData ? JSON.parse(imagesData) : [];

          // Enhanced Image Navigation with Slide Effects
          const mainImage = document.getElementById('mainImage');
          const thumbList = document.getElementById('thumbList');
          const colorList = document.getElementById('colorList');
          const prevBtn = document.getElementById('prevImage');
          const nextBtn = document.getElementById('nextImage');

          let currentImageIndex = 0;

          // Function to smoothly transition to new image with slide effect
          function slideToImage(newIndex, direction = 'next') {
            if (newIndex < 0 || newIndex >= productImages.length) return;

            const mainImageContainer = document.querySelector('.main-image');
            const currentImg = mainImage;

            // Add slide-out animation
            currentImg.style.transform = direction === 'next' ? 'translateX(-100%)' : 'translateX(100%)';
            currentImg.style.opacity = '0';

            setTimeout(() => {
              // Change image source
              currentImg.src = productImages[newIndex];
              currentImg.alt = '<%= product ? (product.name || "Product") : "Product" %>';

              // Reset transform and fade in
              currentImg.style.transform = direction === 'next' ? 'translateX(100%)' : 'translateX(-100%)';
              currentImg.style.opacity = '0';

              // Trigger reflow and animate in
              currentImg.offsetHeight;

              currentImg.style.transform = 'translateX(0)';
              currentImg.style.opacity = '1';

              currentImageIndex = newIndex;
            }, 150);
          }

          // Function to update active thumbnail
          function updateActiveThumbnail(index) {
            if (thumbList) {
              const thumbnails = thumbList.querySelectorAll('img[data-idx]');
              thumbnails.forEach(t => t.classList.remove('active'));
              if (thumbnails[index]) {
                thumbnails[index].classList.add('active');
              }
            }
          }

          // Function to update active color swatch
          function updateActiveSwatch(index) {
            if (colorList) {
              const colorSwatches = colorList.querySelectorAll('.color-swatch');
              colorSwatches.forEach(s => s.classList.remove('active'));
              if (colorSwatches[index]) {
                colorSwatches[index].classList.add('active');
              }
            }
          }

          // Previous image
          function showPreviousImage() {
            const newIndex = currentImageIndex > 0 ? currentImageIndex - 1 : productImages.length - 1;
            slideToImage(newIndex, 'prev');
            updateActiveThumbnail(newIndex);
            updateActiveSwatch(newIndex);
          }

          // Next image
          function showNextImage() {
            const newIndex = currentImageIndex < productImages.length - 1 ? currentImageIndex + 1 : 0;
            slideToImage(newIndex, 'next');
            updateActiveThumbnail(newIndex);
            updateActiveSwatch(newIndex);
          }

          // Event listeners for navigation arrows
          if (prevBtn) {
            prevBtn.addEventListener('click', showPreviousImage);
          }

          if (nextBtn) {
            nextBtn.addEventListener('click', showNextImage);
          }

          // Keyboard navigation
          document.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') {
              showPreviousImage();
            } else if (e.key === 'ArrowRight') {
              showNextImage();
            }
          });

          // Handle thumbnail clicks with slide effect
          if (thumbList) {
            const thumbnails = thumbList.querySelectorAll('img[data-idx]');
            thumbnails.forEach(thumb => {
              thumb.addEventListener('click', function () {
                const idx = parseInt(this.getAttribute('data-idx'));

                if (idx !== currentImageIndex) {
                  const direction = idx > currentImageIndex ? 'next' : 'prev';
                  slideToImage(idx, direction);
                  updateActiveThumbnail(idx);
                  updateActiveSwatch(idx);
                }
              });
            });
          }

          // Zoom functionality for main product image
          const mainImageContainer = document.querySelector('.main-image');
          const mainImageElement = document.getElementById('mainImage');

          if (mainImageContainer && mainImageElement) {
            mainImageContainer.addEventListener('mousemove', (e) => {
              const rect = mainImageContainer.getBoundingClientRect();
              const x = ((e.clientX - rect.left) / rect.width) * 100;
              const y = ((e.clientY - rect.top) / rect.height) * 100;

              mainImageElement.style.transformOrigin = `${x}% ${y}%`;
              mainImageElement.style.transform = 'scale(2)';
            });

            mainImageContainer.addEventListener('mouseleave', () => {
              mainImageElement.style.transformOrigin = 'center center';
              mainImageElement.style.transform = 'scale(1)';
            });
          }

          // Handle size selection
          const sizeButtons = document.querySelectorAll('.size-grid .btn');
          sizeButtons.forEach(button => {
            button.addEventListener('click', function () {
              // Remove active class from all size buttons
              sizeButtons.forEach(btn => btn.classList.remove('active'));

              // Add active class to clicked button
              this.classList.add('active');
            });
          });

          // Handle Buy Now button
          const buyNowBtn = document.querySelector('button[data-product-id]:first-of-type');
          if (buyNowBtn) {
            buyNowBtn.addEventListener('click', function () {
              if (!currentUser) {
                Swal.fire({
                  icon: 'warning',
                  title: 'Login Required',
                  text: 'Please login to add items to cart',
                  confirmButtonText: 'Go to Login'
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.href = '/login';
                  }
                });
                return;
              }

              const productId = this.getAttribute('data-product-id');
              const price = this.getAttribute('data-price');

              // Add to cart first, then redirect to cart
              fetch('/user/addToCart', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  userId: currentUser._id,
                  productId: productId,
                  price: price,
                  quantity: 1
                })
              })
                .then(response => response.json())
                .then(data => {
                  if (data.message === 'Added to cart') {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: 'Product added to cart! Redirecting to cart...',
                      timer: 1500,
                      showConfirmButton: false,
                      timerProgressBar: true
                    }).then(() => {
                      window.location.href = '/user/cart';
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: data.error || 'Failed to add to cart'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                  });
                });
            });
          }

          // Handle Add to Cart button
          const addToCartBtn = document.querySelector('button[data-product-id]:nth-of-type(2)');
          if (addToCartBtn) {
            addToCartBtn.addEventListener('click', function () {
              if (!currentUser) {
                Swal.fire({
                  icon: 'warning',
                  title: 'Login Required',
                  text: 'Please login to add items to cart',
                  confirmButtonText: 'Go to Login'
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.href = '/login';
                  }
                });
                return;
              }

              const productId = this.getAttribute('data-product-id');
              const price = this.getAttribute('data-price');

              fetch('/user/addToCart', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  userId: currentUser._id,
                  productId: productId,
                  price: price,
                  quantity: 1
                })
              })
                .then(response => response.json())
                .then(data => {
                  if (data.message === 'Added to cart') {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: 'Product added to cart successfully!',
                      timer: 2000,
                      showConfirmButton: false,
                      timerProgressBar: true
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: data.error || 'Failed to add to cart'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                  });
                });
            });
          }

          // Handle Wishlist button (update selector for third button)
          const wishlistBtns = document.querySelectorAll('button[data-product-id]');
          const wishlistBtn = wishlistBtns[wishlistBtns.length - 1]; // Get the last button (wishlist)
          if (wishlistBtn) {
            wishlistBtn.addEventListener('click', function () {
              if (!currentUser) {
                Swal.fire({
                  icon: 'warning',
                  title: 'Login Required',
                  text: 'Please login to add items to wishlist',
                  confirmButtonText: 'Go to Login'
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.href = '/login';
                  }
                });
                return;
              }

              const productId = this.getAttribute('data-product-id');

              fetch('/user/addToWishlist', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  userId: currentUser._id,
                  productId: productId
                })
              })
                .then(response => response.json())
                .then(data => {
                  if (data.message === 'Added to wishlist' || data.message === 'Already in wishlist') {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: data.message,
                      timer: 2000,
                      showConfirmButton: false,
                      timerProgressBar: true
                    });
                    // Change heart icon to filled
                    const icon = this.querySelector('i');
                    if (icon) {
                      icon.classList.remove('fa-heart');
                      icon.classList.add('fa-heart');
                      icon.style.color = '#ff6b6b';
                    }
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: data.error || 'Failed to add to wishlist'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                  });
                });
            });
          }

          // Load related products on page load
          console.log('Page loaded, starting related products initialization...');
          loadRelatedProducts();
        });

        // Load related products function
        async function loadRelatedProducts() {
          try {
            console.log('Loading related products...');

            // Get current product category for related products
            const currentProductId = '<%= product ? product._id : "" %>';
            const categoryId = '<%= product && product.category ? product.category._id : "" %>';

            console.log('Current product ID:', currentProductId);
            console.log('Category ID:', categoryId);

            if (!categoryId) {
              console.log('No category ID available, cannot load related products');
              return;
            }

            // Show loading state in console
            console.log('Fetching related products from API...');

            // Fetch related products from the same category (excluding current product)
            const apiUrl = `/api/products?category=${categoryId}&limit=4&exclude=${currentProductId}`;
            console.log('API URL:', apiUrl);

            const response = await fetch(apiUrl);

            if (!response.ok) {
              console.error('API response not OK:', response.status, response.statusText);
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('API Response data:', data);

            if (data.products && data.products.length > 0) {
              console.log(`Found ${data.products.length} related products`);
              displayRelatedProducts(data.products);
            } else {
              console.log('No related products found or empty products array');
              // Show a message to user
              const relatedRow = document.getElementById('relatedRow');
              if (relatedRow) {
                relatedRow.innerHTML = `
                  <div class="col-12 text-center">
                    <div class="alert alert-info">
                      <i class="fas fa-info-circle me-2"></i>
                      No related products found in this category.
                    </div>
                  </div>
                `;
              }
            }
          } catch (error) {
            console.error('Error loading related products:', error);
            console.error('Error stack:', error.stack);

            // Show error message to user
            const relatedRow = document.getElementById('relatedRow');
            if (relatedRow) {
              relatedRow.innerHTML = `
                <div class="col-12 text-center">
                  <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Unable to load related products. Please try refreshing the page.
                  </div>
                </div>
              `;
            }
          }
        }

        // Display related products
        function displayRelatedProducts(products) {
          const relatedRow = document.getElementById('relatedRow');
          if (!relatedRow) {
            console.error('Related row element not found');
            return;
          }

          console.log('Displaying related products:', products);

          if (!Array.isArray(products)) {
            console.error('Products is not an array:', products);
            return;
          }

          if (products.length === 0) {
            console.log('No products to display');
            return;
          }

          try {
            relatedRow.innerHTML = products.map((product, index) => {
              console.log(`Processing product ${index + 1}:`, product);

              // Ensure product has required fields
              if (!product || !product._id) {
                console.warn('Invalid product data:', product);
                return '';
              }

              // Get first image or fallback
              const imageSrc = product.images && Array.isArray(product.images) && product.images[0]
                ? product.images[0]
                : '/images/no-image.png';

              const productName = product.name || 'Product';
              const productId = product._id;

              console.log(`Product ${index + 1} - Name: ${productName}, Image: ${imageSrc}, ID: ${productId}`);

              return `
                <a href="/productDetails/${productId}" class="product-link">
                  <div class="product-card">
                    <div class="wishlist-icon" data-product-id="${productId}">
                      <i class="fa-regular fa-heart"></i>
                    </div>
                    <div class="image-container">
                      <img src="${imageSrc}"
                           alt="${productName}"
                           onerror="console.error('Failed to load image:', this.src); this.src='/images/no-image.png'">
                    </div>
                    <div class="card-body">
                      <h6 class="product-title">${productName}</h6>
                      <div class="price">
                        ${getProductPriceHTML(product)}
                      </div>
                      <button class="btn-add-cart" data-product-id="${productId}">
                        <i class="bi bi-cart"></i> Add to Cart
                      </button>
                    </div>
                  </div>
                </a>
              `;
            }).join('');

            // Helper function for price display
            function getProductPriceHTML(product) {
              try {
                const regPrice = typeof product.price === 'number' ? product.price : (typeof product.regularPrice === 'number' ? product.regularPrice : 0);
                const salePrice = typeof product.sale === 'number' ? product.sale : (typeof product.offerPrice === 'number' ? product.offerPrice : 0);
                const offerDisc = product.offerPercent || 0;

                if (salePrice > 0 && salePrice < regPrice) {
                  return `<span class="text-muted"><del>₹${regPrice.toLocaleString('en-IN')}</del></span>
                          <span class="text-success fw-bold">₹${salePrice.toLocaleString('en-IN')}</span>`;
                } else if (offerDisc > 0) {
                  const discountedPrice = Math.round(regPrice - (regPrice * offerDisc / 100));
                  return `<span class="text-muted"><del>₹${regPrice.toLocaleString('en-IN')}</del></span>
                          <span class="text-success fw-bold">₹${discountedPrice.toLocaleString('en-IN')}</span>
                          <span class="badge bg-success ms-1">${offerDisc}% OFF</span>`;
                } else {
                  return `<span class="fw-bold">₹${regPrice.toLocaleString('en-IN')}</span>`;
                }
              } catch (error) {
                console.error('Error formatting price:', error);
                return `<span class="fw-bold">Price not available</span>`;
              }
            }

            console.log(`Successfully displayed ${products.length} related products`);

            // Add event listeners for related product buttons
            addRelatedProductEventListeners();
          } catch (error) {
            console.error('Error displaying related products:', error);
          }
        }

        // Add event listeners for related product buttons
        function addRelatedProductEventListeners() {
          // Handle Add to Cart buttons for related products
          const relatedAddToCartBtns = document.querySelectorAll('.btn-add-cart[data-product-id]');
          relatedAddToCartBtns.forEach(btn => {
            btn.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();

              if (!currentUser) {
                Swal.fire({
                  icon: 'warning',
                  title: 'Login Required',
                  text: 'Please login to add items to cart',
                  confirmButtonText: 'Go to Login'
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.href = '/login';
                  }
                });
                return;
              }

              const productId = this.getAttribute('data-product-id');

              fetch('/user/addToCart', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  userId: currentUser._id,
                  productId: productId,
                  price: 0, // Price will be calculated on backend
                  quantity: 1
                })
              })
                .then(response => response.json())
                .then(data => {
                  if (data.message === 'Added to cart') {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: 'Product added to cart successfully!',
                      timer: 2000,
                      showConfirmButton: false,
                      timerProgressBar: true
                    });
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: data.error || 'Failed to add to cart'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                  });
                });
            });
          });

          // Handle Wishlist buttons for related products
          const relatedWishlistBtns = document.querySelectorAll('.wishlist-icon[data-product-id]');
          relatedWishlistBtns.forEach(btn => {
            btn.addEventListener('click', function(e) {
              e.preventDefault();
              e.stopPropagation();

              if (!currentUser) {
                Swal.fire({
                  icon: 'warning',
                  title: 'Login Required',
                  text: 'Please login to add items to wishlist',
                  confirmButtonText: 'Go to Login'
                }).then((result) => {
                  if (result.isConfirmed) {
                    window.location.href = '/login';
                  }
                });
                return;
              }

              const productId = this.getAttribute('data-product-id');
              const icon = this.querySelector('i');

              fetch('/user/addToWishlist', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  userId: currentUser._id,
                  productId: productId
                })
              })
                .then(response => response.json())
                .then(data => {
                  if (data.message === 'Added to wishlist' || data.message === 'Already in wishlist') {
                    Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: data.message,
                      timer: 2000,
                      showConfirmButton: false,
                      timerProgressBar: true
                    });
                    // Change heart icon to filled
                    if (icon) {
                      icon.classList.remove('fa-regular', 'fa-heart');
                      icon.classList.add('fa-solid', 'fa-heart');
                      icon.style.color = '#ff6b6b';
                    }
                  } else {
                    Swal.fire({
                      icon: 'error',
                      title: 'Oops...',
                      text: data.error || 'Failed to add to wishlist'
                    });
                  }
                })
                .catch(error => {
                  console.error('Error:', error);
                  Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred. Please try again.'
                  });
                });
            });
          });
        }

        // Add CSS for related products if not already present
        if (!document.getElementById('related-products-styles')) {
          const style = document.createElement('style');
          style.id = 'related-products-styles';
          style.textContent = `
        .product-card {
            background: rgba(255, 255, 255, 0.32);
            border: 1px solid rgba(255, 255, 255, 0.6);
            border-radius: 24px;
            padding: 1.2rem;
            margin-bottom: 1.5rem;
            position: relative;
            transition: transform 0.2s, box-shadow 0.2s;
            display: flex;
            flex-direction: column;
            width: 245px;
            height: 380px;
            overflow: hidden;
            backdrop-filter: blur(8px);
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
        }

        .product-card:hover {
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.14);
            transform: translateY(-2px);
        }

        .image-container {
            width: 100%;
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
            overflow: hidden;
        }

        .image-container img {
            max-height: 100%;
            max-width: 100%;
            object-fit: contain;
            display: block;
        }

        .product-card .card-body {
            padding: 0;
            text-align: center;
            margin-top: auto;
        }

        .product-title {
            font-size: 0.9rem;
            color: #000000;
            margin-bottom: 0.5rem;
            height: 40px;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
            line-clamp: 2;
        }

        .rating {
            color: #f39c12;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .rating span {
            color: #6c757d;
        }

        .price {
            color: #000000;
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 1rem;
        }

        .btn-add-cart {
            background-color: #000;
            color: #fff;
            width: 100%;
            padding: 0.1rem 0.1rem 0.3rem;
            font-size: 0.9rem;
            border: none;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            top: -5px;
        }

        .btn-add-cart:hover {
            background-color: #0b5ed7;
            color: #fff;
        }

        .card a {
            text-decoration: none !important;
            color: #000000;
        }

        .card a:hover {
            text-decoration: none;
            opacity: .9;
        }

        .product-link {
            text-decoration: none;
            color: inherit;
            display: block;
        }

        .product-link:hover {
            text-decoration: none;
            color: inherit;
        }

        .wishlist-icon {
            position: absolute;
            top: 0.75rem;
            right: 0.75rem;
            font-size: 1.3rem;
            color: #000;
            cursor: pointer;
            z-index: 10;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 50%;
            padding: 8px;
            transition: all 0.3s ease;
        }

        .wishlist-icon:hover {
            font-weight: 900;
            color: #ff6b6b;
            background: rgba(255, 255, 255, 0.9);
            transform: scale(1.1);
        }

        /* Responsive styles for related products */
        @media (max-width: 991.98px) {
          .product-card {
            width: 100% !important;
            height: auto !important;
            min-height: 300px;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
          }

          .product-link {
            display: block;
          }

          .image-container {
            height: 150px !important;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
          }

          .image-container img {
            max-height: 100%;
            object-fit: contain;
          }

          .product-title {
            font-size: 0.9rem;
            height: 32px;
            margin-bottom: 0.3rem;
            line-height: 1.2;
            display: -webkit-box;
            -webkit-line-clamp:2;
            -webkit-box-orient: vertical;
            line-clamp: 2;
            overflow: hidden;
          }

          .price {
            font-size: 1rem;
            margin-bottom: 0.5rem;
          }

          .btn-add-cart {
            padding: 0.4rem;
            font-size: 0.85rem;
            border-radius: 4px;
            margin-top: 0.3rem;
          }

          .wishlist-icon {
            top: 0.5rem;
            right: 0.5rem;
            font-size: 1.1rem;
            padding: 6px;
          }
        }

        @media (max-width: 575.98px) {
          .product-card {
            margin-bottom: 1rem;
          }
        }
      `;
          document.head.appendChild(style);
        }

        // Toggle product description
        function toggleDescription() {
    const descElement = document.getElementById('product-description');
    const descIcon = document.getElementById('desc-icon');
    const toggleBtn = document.getElementById('toggle-btn');

    // If description is currently visible → hide it
    if (descElement.style.display === '' || descElement.style.display === 'block') {
      descElement.style.display = 'none';
      descIcon.classList.replace('fa-chevron-down', 'fa-chevron-up');
      toggleBtn.lastChild.textContent = ' Show Product Details';
    } 
    // If hidden → show it again
    else {
      descElement.style.display = 'block';
      descIcon.classList.replace('fa-chevron-up', 'fa-chevron-down');
      toggleBtn.lastChild.textContent = ' Hide Product Details';
    }
  }
      </script>
  </body>

  </html>