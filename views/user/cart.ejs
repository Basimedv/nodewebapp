<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COLINGUEST - Shopping Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/cart.css" rel="stylesheet">
</head>
<body data-user-id="<%= user ? user._id : '' %>">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            --danger-gradient: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
            --dark-gradient: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            --shadow-lg: 0 10px 30px rgba(0, 0, 0, 0.1);
            --shadow-sm: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        body {
    background: url('/images/background.jpg') no-repeat center center fixed;
    background-size: cover; /* makes image cover full screen */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
}


        /* Header Styles - Same as Product Details */
        .mainhead {
            background: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            z-index: 1000;
        }

        .imageLogo {
            height: 50px;
            width: auto;
            max-width: 200px;
        }

        .buttons {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .icon-btn {
            position: relative;
            color: #6c757d;
            text-decoration: none;
            font-size: 1.2rem;
            padding: 0.5rem;
            border-radius: 50%;
            transition: all 0.3s ease;
        }

        .icon-btn:hover {
            color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }

        .badge {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #dc3545;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
        }

       

       

      

        .cart-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
        }

        .empty-cart {
            background: white;
            border-radius: 20px;
            padding: 4rem 2rem;
            text-align: center;
            box-shadow: var(--shadow-lg);
            margin: 2rem 0;
        }

        .empty-cart i {
            font-size: 4rem;
            color: #e9ecef;
            margin-bottom: 1.5rem;
        }

        .empty-cart h3 {
            color: #6c757d;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .empty-cart p {
            color: #adb5bd;
            margin-bottom: 2rem;
            font-size: 1.1rem;
        }

        .continue-shopping {
            background: var(--primary-gradient);
            color: white;
            border: none;
            padding: 1rem 2rem;
            border-radius: 25px;
            text-decoration: none;
            display: inline-block;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .continue-shopping:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            color: white;
            text-decoration: none;
        }

        .cart-item {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow-sm);
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .cart-item:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
            border-color: #667eea;
        }

        .cart-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--primary-gradient);
        }

        .cart-item-image {
            width: 120px;
            height: 140px;
            object-fit: cover;
            border-radius: 15px;
            border: 2px solid #f8f9fa;
            transition: all 0.3s ease;
        }

        .cart-item:hover .cart-item-image {
            border-color: #667eea;
            transform: scale(1.05);
        }

        .cart-item-details {
            flex: 1;
            padding-left: 1.5rem;
        }

        .cart-item-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #2c3e50;
            line-height: 1.3;
        }

        .cart-item-price {
            font-size: 1.1rem;
            color: #6c757d;
            margin-bottom: 0.5rem;
        }

        .cart-item-original-price {
            text-decoration: line-through;
            color: #adb5bd;
            margin-right: 0.5rem;
        }

        .cart-item-total {
            font-size: 1.4rem;
            font-weight: 700;
            color: #28a745;
            margin-bottom: 1rem;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin: 1rem 0;
        }

        .quantity-btn {
            width: 40px;
            height: 40px;
            border: 2px solid #e9ecef;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            color: #6c757d;
        }

        .quantity-btn:hover {
            background: var(--primary-gradient);
            color: white;
            border-color: #667eea;
            transform: scale(1.1);
        }

        .quantity-input {
            width: 70px;
            text-align: center;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 0.5rem;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .quantity-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.25);
        }

        .quantity-input:invalid {
            border-color: #dc3545;
            background-color: #fff5f5;
        }

        .remove-btn {
            background: var(--danger-gradient);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }

        .remove-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(220, 53, 69, 0.4);
        }

        /* Enhanced Order Summary */
        .cart-summary {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            height: fit-content;
            box-shadow: var(--shadow-lg);
            border: 1px solid #e9ecef;
            position: sticky;
            top: 2rem;
        }

        .summary-header {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #f8f9fa;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            padding: 0.75rem 0;
            border-bottom: 1px solid #f8f9fa;
            transition: all 0.3s ease;
        }

        .summary-row:hover {
            background: rgba(102, 126, 234, 0.05);
            padding: 0.75rem 1rem;
            margin: 0 -1rem;
            border-radius: 8px;
        }

        .summary-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .summary-label {
            font-weight: 500;
            color: #6c757d;
        }

        .summary-value {
            font-weight: 600;
            color: #2c3e50;
        }

        .summary-total {
            background: var(--primary-gradient);
            color: white;
            padding: 1rem;
            border-radius: 15px;
            margin: 1.5rem 0;
            animation: pulse 2s infinite;
        }

        .summary-total .summary-label,
        .summary-total .summary-value {
            color: white;
            font-size: 1.2rem;
            font-weight: 700;
        }

        .checkout-btn {
            background: var(--success-gradient);
            color: white;
            border: none;
            padding: 1rem 2rem;
            width: 100%;
            border-radius: 25px;
            font-size: 1.1rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
            position: relative;
            overflow: hidden;
        }

        .checkout-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .checkout-btn:hover::before {
            left: 100%;
        }

        .checkout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
        }

        /* Footer - Same as Product Details */
        .footer {
            background-color: black;
            color: white;
            padding: 3rem 0 1rem;
            margin-top: 4rem;
        }

        .footer-title {
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: white;
        }

        .footer-links {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .footer-links li {
            margin-bottom: 0.5rem;
        }

        .footer-links a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .footer-links a:hover {
            color: white;
        }

        .footer-social a {
            color: rgba(255, 255, 255, 0.8);
            margin-right: 1rem;
            font-size: 1.3rem;
            transition: color 0.3s ease;
        }

        .footer-social a:hover {
            color: #667eea;
        }

        /* Animations */
        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(102, 126, 234, 0); }
            100% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0); }
        }

        .cart-item {
            animation: slideInUp 0.5s ease-out;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        @media (max-width: 768px) {
            .cart-container {
                padding: 0 1rem;
            }

            .cart-item {
                flex-direction: column;
                text-align: center;
            }

            .cart-item-image {
                width: 100px;
                height: 120px;
                margin: 0 auto;
            }

            .cart-item-details {
                padding-left: 0;
                padding-top: 1rem;
            }

            .quantity-controls {
                justify-content: center;
            }

            .page-title {
                font-size: 2rem;
            }

            .mainhead {
                padding: 0.75rem 1rem;
            }

            .imageLogo {
                height: 40px;
            }
        }
    </style>
</head>

<body data-user-id="<%= user ? user._id : '' %>">
    <!-- Header - Same as Product Details -->
    <header>
        <div class="mainhead">
            <img src="/images/colinguest.png" class="imageLogo" alt="COLINGUEST">
        </div>
    </header>

    <div class="cart-container">
        <% if (typeof cartItems !== 'undefined' && cartItems.length > 0) { %>
            <div class="cart-header">
                <h2><i class="fas fa-shopping-cart me-2"></i>Shopping Cart (<%= cartItems.length %> items)</h2>
                <p class="text-muted">Review your items and proceed to checkout</p>
            </div>

            <div class="row">
                <div class="col-lg-8">
                    <% cartItems.forEach((item, index) => { %>
                        <div class="cart-item" data-item-id="<%= item.productId._id %>">
                            <div class="d-flex">
                                <img src="<%= item.images?.[0] || '/images/no-image.png' %>"
                                     alt="<%= item.name %>"
                                     class="cart-item-image"
                                     onerror="this.src='/images/no-image.png'">

                                <div class="cart-item-details">
                                    <div class="cart-item-title">
                                        <%= item.name %>
                                    </div>

                                    <div class="cart-item-price">
                                        <% const regularPrice = item.regularPrice || item.price || 0; %>
                                        <% const salePrice = item.sale || 0; %>
                                        <% const offerPercent = item.offerPercent || 0; %>

                                        <% if (salePrice > 0 && salePrice < regularPrice) { %>
                                            <span class="cart-item-original-price">₹<%= regularPrice %></span>
                                            <span class="text-success fw-semibold">₹<%= salePrice %></span>
                                        <% } else if (offerPercent > 0) { %>
                                            <span class="cart-item-original-price">₹<%= regularPrice %></span>
                                            <span class="text-success fw-semibold">₹<%= Math.round(regularPrice - (regularPrice * offerPercent / 100)) %></span>
                                            <span class="badge bg-success ms-1"><%= offerPercent %>% OFF</span>
                                        <% } else { %>
                                            ₹<%= regularPrice %>
                                        <% } %>
                                    </div>

                                    <div class="cart-item-quantity">
                                        Quantity: <%= item.quantity %>
                                    </div>

                                    <div class="quantity-controls">
                                        <button class="quantity-btn" onclick="console.log('Minus button clicked for item:', '<%= item._id %>'); changeQuantity('<%= item._id %>', 'minus')">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <input type="number"
                                               class="quantity-input"
                                               id="quantity-<%= item._id %>"
                                               value="<%= item.quantity %>"
                                               min="1"
                                               max="10"
                                               step="1"
                                               onkeyup="validateQuantity('<%= item._id %>', this.value)"
                                               onchange="updateQuantityDirect('<%= item._id %>', this.value)">
                                        <button class="quantity-btn" onclick="console.log('Plus button clicked for item:', '<%= item._id %>'); changeQuantity('<%= item._id %>', 'plus')">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>

                                    <button class="remove-btn" onclick="console.log('Remove button clicked for item:', '<%= item.productId._id %>'); removeFromCart('<%= item.productId._id %>')" data-product-id="<%= item.productId._id %>">
                                        <i class="fas fa-trash me-1"></i>Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                </div>

                <div class="col-lg-4">
                    <div class="cart-summary">
                        <h4>Order Summary</h4>

                        <div class="summary-row">
                            <span>Subtotal (<%= cartItems.length %> items)</span>
                            <span>₹<%= cartItems.reduce((total, item) => {
                                const regularPrice = item.regularPrice || item.price || 0;
                                const salePrice = item.sale || 0;
                                const offerPercent = item.offerPercent || 0;
                                const itemPrice = salePrice > 0 && salePrice < regularPrice ? salePrice :
                                                offerPercent > 0 ? Math.round(regularPrice - (regularPrice * offerPercent / 100)) :
                                                regularPrice;
                                return total + (itemPrice * item.quantity);
                            }, 0) %></span>
                        </div>

                        <div class="summary-row">
                            <span>Shipping</span>
                            <span class="text-success">FREE</span>
                        </div>

                        <div class="summary-row summary-total">
                            <span><strong>Total Amount</strong></span>
                            <span><strong>₹<%= cartItems.reduce((total, item) => {
                                const regularPrice = item.regularPrice || item.price || 0;
                                const salePrice = item.sale || 0;
                                const offerPercent = item.offerPercent || 0;
                                const itemPrice = salePrice > 0 && salePrice < regularPrice ? salePrice :
                                                offerPercent > 0 ? Math.round(regularPrice - (regularPrice * offerPercent / 100)) :
                                                regularPrice;
                                return total + (itemPrice * item.quantity);
                            }, 0) %></strong></span>
                        </div>

                        <button class="checkout-btn" onclick="proceedToCheckout()">
                            <i class="fas fa-credit-card me-2"></i>Proceed to Checkout
                        </button>

                        <div class="text-center mt-3">
                            <a href="/productListing" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        <% } else { %>
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <h3>Your Shopping Cart is Empty</h3>
                <p>Looks like you haven't added any items to your cart yet. Start shopping to fill it up!</p>
                <a href="/productListing" class="continue-shopping">
                    <i class="fas fa-store me-2"></i>Start Shopping
                </a>
            </div>
        <% } %>

    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <div class="footer-title">COLINGUEST</div>
                    <p class="text-light">Curated fashion and lifestyle picks. Discover premium styles at the best value.</p>
                    <div class="footer-social">
                        <a href="#"><i class="fab fa-facebook"></i></a>
                        <a href="#"><i class="fab fa-twitter"></i></a>
                        <a href="#"><i class="fab fa-instagram"></i></a>
                        <a href="#"><i class="fab fa-youtube"></i></a>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="footer-title">Quick Links</div>
                    <ul class="footer-links">
                        <li><a href="/about">About Us</a></li>
                        <li><a href="/contact">Contact</a></li>
                        <li><a href="/privacy">Privacy Policy</a></li>
                        <li><a href="/terms">Terms & Conditions</a></li>
                    </ul>
                </div>
                <div class="col-md-3">
                    <div class="footer-title">Customer Service</div>
                    <ul class="footer-links">
                        <li><a href="/shipping">Shipping Info</a></li>
                        <li><a href="/returns">Returns & Exchange</a></li>
                        <li><a href="/faq">FAQ</a></li>
                        <li><a href="/support">Support</a></li>
                    </ul>
                </div>
                <div class="col-md-3">
                    <div class="footer-title">Contact Info</div>
                    <ul class="footer-links">
                        <li><i class="fas fa-phone me-2"></i>+91 98765 43210</li>
                        <li><i class="fas fa-envelope me-2"></i>support@colinguest.com</li>
                        <li><i class="fas fa-map-marker-alt me-2"></i>Mumbai, India</li>
                    </ul>
                </div>
            </div>
            <hr class="my-4 opacity-25">
            <div class="text-center">
                <p class="mb-0">&copy; 2024 COLINGUEST. All rights reserved. | Made with <i class="fas fa-heart text-danger"></i> in India</p>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const userId = document.body.dataset.userId;
        console.log('=== CART PAGE DEBUG ===');
        console.log('User ID from body dataset:', userId);
        console.log('User ID type:', typeof userId);
        console.log('User ID length:', userId ? userId.length : 'N/A');

        function changeQuantity(itemId, action) {
            const input = document.getElementById(`quantity-${itemId}`);
            if (!input) {
                console.error('Quantity input not found for item:', itemId);
                Swal.fire({ icon: 'error', text: 'Quantity input not found' });
                return;
            }

            let value = parseInt(input.value);

            if (action === 'minus' && value > 1) {
                value--;
            } else if (action === 'plus' && value < 10) {
                value++;
            } else {
                // Show error for invalid action
                Swal.fire({ 
                    icon: 'warning', 
                    title: 'Quantity Limit Reached',
                    text: action === 'minus' ? 'Minimum quantity is 1' : 'Maximum quantity is 10',
                    timer: 2000,
                    showConfirmButton: false
                });
                return;
            }

            input.value = value;
            updateQuantity(itemId, value);
        }

        function validateQuantity(itemId, value) {
            const input = document.getElementById(`quantity-${itemId}`);
            if (!input) return;

            const numValue = parseInt(value);
            
            // Remove previous validation classes
            input.classList.remove('is-valid', 'is-invalid');
            
            if (value === '' || isNaN(numValue)) {
                input.classList.add('is-invalid');
                return;
            }
            
            if (numValue < 1 || numValue > 10) {
                input.classList.add('is-invalid');
            } else {
                input.classList.add('is-valid');
            }
        }

        function updateQuantityDirect(itemId, value) {
            // Validate input
            const numValue = parseInt(value);
            if (isNaN(numValue)) {
                Swal.fire({ 
                    icon: 'warning', 
                    title: 'Invalid Input',
                    text: 'Please enter a valid number between 1 and 10.',
                    timer: 2000,
                    showConfirmButton: false
                });
                // Reset to 1
                const input = document.getElementById(`quantity-${itemId}`);
                if (input) input.value = 1;
                return;
            }

            // Clamp the value
            const clampedValue = Math.max(1, Math.min(10, numValue));
            
            // If value was clamped, show warning
            if (clampedValue !== numValue) {
                Swal.fire({ 
                    icon: 'warning', 
                    title: 'Quantity Adjusted',
                    text: `Quantity must be between 1 and 10. Set to ${clampedValue}.`,
                    timer: 2000,
                    showConfirmButton: false
                });
            }
            
            // Update the input field
            const input = document.getElementById(`quantity-${itemId}`);
            if (input) {
                input.value = clampedValue;
                updateQuantity(itemId, clampedValue);
            } else {
                console.error('Quantity input not found for item:', itemId);
                Swal.fire({ icon: 'error', text: 'Quantity input not found' });
            }
        }

        async function updateQuantity(itemId, quantity) {
            try {
                console.log('Updating quantity for item:', itemId, 'to:', quantity);
                
                const response = await fetch('/user/updateCartQuantity', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId, itemId, quantity })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log('Update response:', data);

                if (data.message === 'Quantity updated') {
                    // Update totals without full reload
                    updateCartTotals();
                    showNotification('Quantity updated successfully!', 'success');
                } else {
                    // Revert the input value on error
                    const input = document.getElementById(`quantity-${itemId}`);
                    if (input) {
                        input.value = quantity - 1; // Revert to previous value
                    }
                    Swal.fire({ 
                        icon: 'error', 
                        title: 'Update Failed',
                        text: data.error || 'Failed to update quantity. Please try again.',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Quantity update error:', error);
                
                // Revert the input value on error
                const input = document.getElementById(`quantity-${itemId}`);
                if (input) {
                    input.value = quantity - 1; // Revert to previous value
                }
                
                Swal.fire({ 
                    icon: 'error', 
                    title: 'Connection Error',
                    text: 'Unable to update quantity. Please check your connection and try again.',
                    confirmButtonText: 'Retry',
                    showCancelButton: true,
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        updateQuantity(itemId, quantity);
                    }
                });
            }
        }

        async function removeFromCart(itemId) {
            console.log('=== FRONTEND REMOVE DEBUG ===');
            console.log('Remove function called with itemId:', itemId);
            console.log('User ID available:', userId);
            console.log('User ID type:', typeof userId);
            console.log('User ID length:', userId ? userId.length : 'N/A');

            // Check if user is logged in
            if (!userId || userId === '') {
                console.error('User not logged in');
                Swal.fire({
                    icon: 'warning',
                    title: 'Login Required',
                    text: 'Please login to remove items from your cart',
                    confirmButtonText: 'Go to Login'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
                return;
            }

            // Validate itemId
            if (!itemId || itemId === '') {
                console.error('Invalid itemId:', itemId);
                Swal.fire({ icon: 'error', text: 'Invalid item ID' });
                return;
            }

            const result = await Swal.fire({
                title: 'Remove Item?',
                text: 'Are you sure you want to remove this item from your cart?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, Remove It',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                background: '#fff',
                customClass: {
                    popup: 'animated shake',
                    title: 'text-danger'
                },
                allowOutsideClick: false,
                allowEscapeKey: false
            });

            if (result.isConfirmed) {
                try {
                    console.log('Sending remove request for item:', itemId);
                    console.log('Request payload:', JSON.stringify({ userId, productId: itemId }));
                    console.log('ItemId type:', typeof itemId);
                    console.log('ItemId length:', itemId ? itemId.length : 'N/A');

                    const response = await fetch('/user/removeFromCart', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId, productId: itemId })
                    });

                    console.log('Response status:', response.status);
                    console.log('Response ok:', response.ok);
                    console.log('Response headers:', Object.fromEntries(response.headers.entries()));

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    console.log('Remove response data:', data);

                    if (data.message === 'Removed from cart') {
                        console.log('Item successfully removed from server');
                        console.log('Looking for element with itemId:', itemId);

                        // Try multiple selectors to find the item
                        let itemElement = null;

                        // Method 1: Direct onclick match
                        itemElement = document.querySelector(`[onclick="removeFromCart('${itemId}')"]`);
                        if (itemElement) {
                            console.log('Found with direct onclick match');
                        }

                        // Method 2: onclick contains match (in case of extra spaces or quotes)
                        if (!itemElement) {
                            const allButtons = document.querySelectorAll('[onclick*="removeFromCart"]');
                            allButtons.forEach(button => {
                                const onclick = button.getAttribute('onclick');
                                if (onclick && onclick.includes(`removeFromCart('${itemId}')`)) {
                                    itemElement = button;
                                    console.log('Found with onclick contains match');
                                }
                            });
                        }

                        // Method 3: Find by data attribute or ID if available
                        if (!itemElement) {
                            itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
                            if (itemElement) {
                                console.log('Found with data-item-id match');
                            }
                        }

                        if (itemElement) {
                            const cartItem = itemElement.closest('.cart-item');
                            if (cartItem) {
                                console.log('Found cart item container, animating removal');
                                cartItem.style.transition = 'all 0.3s ease';
                                cartItem.style.transform = 'translateX(-100%)';
                                cartItem.style.opacity = '0';

                                setTimeout(() => {
                                    console.log('Removing item from DOM');
                                    cartItem.remove();
                                    updateCartTotals();
                                    // Show success message
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Removed!',
                                        text: 'Item has been removed from your cart.',
                                        timer: 2000,
                                        showConfirmButton: false,
                                        background: '#d4edda',
                                        color: '#155724'
                                    });
                                }, 300);
                            } else {
                                console.error('Could not find cart-item container');
                                updateCartTotals();
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Removed!',
                                    text: 'Item has been removed from your cart.',
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                            }
                        } else {
                            console.error('Could not find item element to remove');
                            console.log('Available remove buttons:');
                            document.querySelectorAll('[onclick*="removeFromCart"]').forEach((button, index) => {
                                console.log(`Button ${index}:`, button.getAttribute('onclick'));
                            });
                            // Fallback: just update totals since server removal succeeded
                            updateCartTotals();
                            Swal.fire({
                                icon: 'success',
                                title: 'Removed!',
                                text: 'Item has been removed from your cart.',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        }
                    } else {
                        console.error('Server response error:', data);
                        Swal.fire({ icon: 'error', text: data.error || 'Failed to remove item' });
                    }
                } catch (error) {
                    console.error('Network or parsing error:', error);
                    console.log('Error name:', error.name);
                    console.log('Error message:', error.message);
                    console.log('Error stack:', error.stack);

                    Swal.fire({
                        icon: 'error',
                        title: 'Connection Error',
                        text: 'Unable to remove item. Please check your connection and try again.',
                        confirmButtonText: 'Retry',
                        showCancelButton: true,
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            removeFromCart(itemId);
                        }
                    });
                }
            } else {
                console.log('User cancelled removal');
            }
        }

        // Update cart totals dynamically
        function updateCartTotals() {
            const cartItems = document.querySelectorAll('.cart-item');
            const itemCount = cartItems.length;

            if (itemCount === 0) {
                // Cart is empty, reload to show empty state
                setTimeout(() => {
                    window.location.reload();
                }, 500);
                return;
            }

            let subtotal = 0;
            cartItems.forEach(item => {
                const totalText = item.querySelector('.cart-item-total').textContent;
                const priceMatch = totalText.match(/₹([\d,]+)/);
                if (priceMatch) {
                    subtotal += parseInt(priceMatch[1].replace(/,/g, ''));
                }
            });

            const total = subtotal;

            // Update the summary section
            const subtotalEl = document.getElementById('subtotal-display');
            const totalEl = document.getElementById('total-display');
            const itemCountEl = document.getElementById('item-count');

            if (subtotalEl) subtotalEl.textContent = subtotal.toLocaleString('en-IN');
            if (totalEl) totalEl.textContent = total.toLocaleString('en-IN');
            if (itemCountEl) itemCountEl.textContent = itemCount;
        }

        // Show notification
        function showNotification(message, type = 'info') {
            Swal.fire({
                text: message,
                icon: type,
                timer: 2000,
                showConfirmButton: false,
                toast: true,
                position: 'top-end',
                background: type === 'success' ? '#d4edda' : type === 'error' ? '#f8d7da' : '#d1ecf1',
                color: type === 'success' ? '#155724' : type === 'error' ? '#721c24' : '#0c5460'
            });
        }

        function proceedToCheckout() {
            if (!userId) {
                Swal.fire({
                    title: 'Login Required',
                    text: 'Please login to checkout',
                    icon: 'warning',
                });
                return;
            }
            window.location.href = '/user/checkout';
        }
    </script>
</body>
</html>

